<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
<xsl:output method="xml" version="1.0" encoding="UTF-8" omit-xml-declaration="yes"/>

<!-- I.Lewin Oct 08 convert PMC xml into IEXML by adding "text" elements in titles
and paragraphs and table cells (update on pmc2iexml.xsl but currently okeeping the old version
around for possible comparison 
Jee-Hyub 2012: added <text> for <fn> and <caption> in <front> and <back>
-->


<xsl:template match="/">
<xsl:apply-templates />
</xsl:template>

<!-- we look for article title in front and body (not back)
             for titles in abstracts and body 
             for p in abstract and body -->

<!--xsl:template match="xmlstuff">
<xsl:apply-templates/>
</xsl:template-->

<xsl:template match="front//article-title">
<xsl:call-template name="insertText"/>
</xsl:template>

<!-- we also analyze paragraphs in footnotes in front -->
<xsl:template match="front//fn//p">
<xsl:call-template name="insertText"/>
</xsl:template>

<xsl:template match="body//article-title">
<xsl:call-template name="insertText"/>
</xsl:template>

<xsl:template match="abstract//title">
<xsl:call-template name="insertText"/>
</xsl:template>

<xsl:template match="body//title">
<xsl:call-template name="insertText"/>
</xsl:template>

<xsl:template match="abstract//p">
<xsl:call-template name="insertText"/>
</xsl:template>

<xsl:template match="body//p">
<xsl:call-template name="insertText"/>
</xsl:template>

<!-- we also analyze paragraphs in captions in back -->
<xsl:template match="back//caption//p">
<xsl:call-template name="insertText"/>
</xsl:template>

<!-- we also analyze paragraphs in footnotes in back -->
<xsl:template match="back//fn//p">
<xsl:call-template name="insertText"/>
</xsl:template>

<!-- we also analyze ref in back for doi mining -->
<xsl:template match="back//ref">
<xsl:call-template name="insertText"/>
</xsl:template>

<!-- and we look for table data and headers in everywhere including back -->

<xsl:template match="//td|//th">
<xsl:call-template name="insertText"/>
</xsl:template>

<!-- we also analyze section tagging for ack_fund for grant id mining -->
<xsl:template match="SecTag[@type='ACK_FUND']//p">
<xsl:call-template name="insertText4Fund"/>
</xsl:template>

<!-- NB the ANNO structure is generated by unknit.xsl and removes nesting of <p> elements -->

<xsl:template match="ANNO/p">
<xsl:call-template name="insertText"/>
</xsl:template>

<!-- insertText -->
<xsl:template name="insertText">
<xsl:copy>
<xsl:copy-of select="@*"/>
<xsl:if test="*|text()">
<text><xsl:apply-templates/></text>
</xsl:if>
</xsl:copy>
</xsl:template>

<!-- insertText4Fund -->
<xsl:template name="insertText4Fund">
<xsl:copy>
<xsl:copy-of select="@*"/>
<xsl:if test="*|text()">
<text4fund><text><xsl:apply-templates/></text></text4fund>
</xsl:if>
</xsl:copy>
</xsl:template>

<!-- insertPlain -->

<!--xsl:template name="insertPlain">
<xsl:copy>
<xsl:copy-of select="@*"/>
<xsl:if test="*|text()">
<plain><xsl:apply-templates/></plain>
</xsl:if>
</xsl:copy>
</xsl:template-->

<!-- otherwise copy and recurse -->

<xsl:template match="node() | @*">
   <xsl:copy>
   <xsl:apply-templates select="@*"/>
   <xsl:apply-templates/>
   </xsl:copy>
</xsl:template>

<xsl:template match="comment()"/>

</xsl:stylesheet>
